#!/usr/bin/env python3

import socket
import argparse
import sys
from types import NoneType
from urllib.parse import urlparse

TCP_PORT = 21

parser = argparse.ArgumentParser("FTP Client")
parser.add_argument("operation", help="Operations are: ls <URL>, mkdir <URL>, rm <URL>, rmdir <URL>, cp <ARG1> <ARG2>, mv <ARG1> <ARG2>", type=str)
parser.add_argument("args", type=str, nargs='+')
parser.add_argument("-v", "--verbose", help="Print all messages to and from the FTP server", action="store_true")
parser_args = parser.parse_args()

# Handles the similar operations that take a single argument - ls, mkdir, rm, and rmdir
def single_arg_op():
    print("to do")

# Send the username to the server
def send_user(sock, username):

    print("to do")

# Parses the arguments passed into the program to retrieve hostname, username and password. Returns these values as strings in a tuple.
def parse_args():
    url1 = urlparse(parser_args.args[0])
    if url1.scheme == 'ftp':
        hostname = url1.hostname
        ftp_index = 0
    elif urlparse(parser_args.args[1]).scheme == 'ftp':
        url2 = urlparse(parser_args[1])
        hostname = url2.hostname
        ftp_index = 1
    else:
        print("Hostname error")
        sys.exit(1)
    
    username = urlparse(parser_args.args[ftp_index]).username
    if username == None:
        username = "anonymous"

    #Can be 'None' - affects connect process
    password = urlparse(parser_args.args[ftp_index]).password

    return hostname, username, password

# Performs the opening connections with the FTP server, sending the username and password (if given)
# Forms the control socket and the data channel
def start_connection(hostname, username, password):
    control_sock = socket.socket()
    control_sock.connect((hostname, TCP_PORT))

    response = control_sock.recv(1024)
    print(type(response))
    print(response)
    decoded_response = response.decode('UTF-8')
    print("decoded response")
    print(type(decoded_response))
    print(decoded_response)
    print('\r\n' in decoded_response)

    control_sock.send(("USER " + username + "\r\n").encode())
    
    response = control_sock.recv(1024)
    print(response)

    print("password: ", password)
    if password != None:
        print("sending password")
        control_sock.send(("PASS " + password + "\r\n").encode())
        response = control_sock.recv(1024)
        print(response)

# Parses and receives a response from the FTP server. Wait for a \r\n before finishing receiving.
def receive_response(sock):
    response = sock.recv(1024)

    print("to do")

# Main function of the program - handles the argument inputs and starts the connection with the FTP server
def ftp_client():
    print("hello world")
    print(parser)
    print(parser_args)

    op_list = ["ls", "mkdir", "rm", "rmdir", "cp", "mv"]

    cp_or_mv = parser_args.operation in op_list[4:6]

    #Exit if an unacceptable operation is given
    if parser_args.operation not in op_list:
        print("Invalid operation")
        sys.exit(1)

    #Exit if the incorrect amount of arguments are passed compared to operation selected
    if (len(parser_args.args) > 2) or (not cp_or_mv and len(parser_args.args) > 1):
        print("Invalid amount of arguments")
        sys.exit(1)
    elif (cp_or_mv) and len(parser_args.args) < 2:
        print("Invalid amount of arguments")
        sys.exit(1)

    # Parse arguments to retrieve path, username, password
    hostname, username, password = parse_args()

    #Start Connection
    start_connection(hostname, username, password)
    


if __name__ == '__main__':
    ftp_client()
    
#ftp://ftp.3700.network
#python 3700ftp ls ftp://kook:O5UCntxHDi7vzdl8Weqh@ftp.3700.network